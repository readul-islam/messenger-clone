// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?
  emailVerified   String?
  image           String?
  hashedPassword  String?
  createdAt       DateTime       @default(now())
  updateAt        DateTime       @updatedAt
  conversationIds String[]       @db.ObjectId
  conversations   conversation[] @relation(fields: [conversationIds], references: [id])
  seenMessageIds  String[]       @db.ObjectId
  seenMessage     Message[]      @relation("Seen", fields: [seenMessageIds], references: [id])
  accoutn         Account[]
  messages        Message[]
 @@unique([email])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  name          String?
  isGroup       Boolean?
  messagesIds   String[]  @db.ObjectId
  messages      Message[]
  userIds       String[]  @db.ObjectId
  users         User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  body           String?
  image          String?
  createAt       DateTime     @default(now())
  seenIds        String[]     @db.ObjectId
  seen           User[]       @relation("Seen", fields: [seenIds], references: [id])
  conversationId String       @db.ObjectId
  conversation   conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  userId   String? @db.ObjectId
  senderId String  @db.ObjectId
  sender   User    @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
